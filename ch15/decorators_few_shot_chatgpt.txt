CONTEXT: You are provided with a partial Python script enclosed with {{{ FIZZBUZZ_PRINTER }}} where some of the code is missing, and examples of a good implementation enclosed with {{{ EXAMPLES }}}
TASK: Implement the decorators with the missing implementation in the code while following the style guide.


EXAMPLES:

INCOMPLETE_CODE: {{{

import logging
import time

logger: logging.Logger = logging.getLogger(__name__)

@time_it
def my_func(a: int, b: int) -> int:
    return a + b

}}}

COMPLETE_CODE: {{{

import logging
import time
from functools import wraps
from typing import Any

logger: logging.Logger = logging.getLogger(__name__)


def time_it(func: callable) -> callable:
    @wraps(func)
    def wrapper(*args, **kwargs):
        start_time: float = time.time()
        res: Any = func(*args, **kwargs)
        end_time: float = time.time()
        logger.info(
            "Function called.",
            extra={
                "function": func.__name__,
                "args": args,
                "kwargs": kwargs,
                "error": "",
                "timing": f"{end_time - start_time} seconds"})
        return res

    return wrapper

@time_it
def my_func(a: int, b: int) -> int:
    return a + b
}}}

FIZZBUZZ_PRINTER: {{{
import logging

logger = logging.getLogger(__name__)



FIZZBUZZ_COUNTER = 0


@log_function_args
@increment_counter
@validate_args_types_and_limits(0, 500)
def print_fizzbuzz(limit: int) -> None:
    for i in range(1, limit + 1):
        if i % 3 == 0 and i % 5 == 0:
            print("FizzBuzz")
        elif i % 3 == 0:
            print("Fizz")
        elif i % 5 == 0:
            print("Buzz")
        else:
            print(i)

}}}

CODE:
